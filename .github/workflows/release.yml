name: Release

on:
  push:
    tags:
      - "v*.*.*"

jobs:
  release:
    name: Release
    strategy:
      matrix:
        os:
          - ubuntu-latest
        go:
          - "1.17"
    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Force fetch upstream tags
        run: git fetch --tags --force

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Docker Login
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Install Go
        uses: actions/setup-go@v2
        with:
          go-version: ${{ matrix.go }}

      - name: Print Go version and environment
        id: vars
        run: |
          echo "::set-output name=version_tag::${GITHUB_REF/refs\/tags\//}"
          echo "::set-output name=short_sha::$(git rev-parse --short HEAD)"
          echo "::set-output name=go_cache::$(go env GOCACHE)"
          echo ~/.local/bin >> $GITHUB_PATH
          TAG=${GITHUB_REF/refs\/tags\//}
          SEMVER_RE='[^0-9]*\([0-9]*\)[.]\([0-9]*\)[.]\([0-9]*\)\([0-9A-Za-z\.-]*\)'
          TAG_MAJOR=`echo ${TAG#v} | sed -e "s#$SEMVER_RE#\1#"`
          TAG_MINOR=`echo ${TAG#v} | sed -e "s#$SEMVER_RE#\2#"`
          TAG_PATCH=`echo ${TAG#v} | sed -e "s#$SEMVER_RE#\3#"`
          TAG_SPECIAL=`echo ${TAG#v} | sed -e "s#$SEMVER_RE#\4#"`
          echo "::set-output name=tag_major::${TAG_MAJOR}"
          echo "::set-output name=tag_minor::${TAG_MINOR}"
          echo "::set-output name=tag_patch::${TAG_PATCH}"
          echo "::set-output name=tag_special::${TAG_SPECIAL}"

      - name: Validate commits and tag signatures
        run: |
          curl 'https://github.com/wolfulus.gpg' | gpg --import
          echo "Verifying the tag: ${{ steps.vars.outputs.version_tag }}"
          git verify-tag "${{ steps.vars.outputs.version_tag }}" || exit 1

      - name: Install Cloudsmith CLI
        run: pip install --upgrade cloudsmith-cli

      - name: Cache the build cache
        uses: actions/cache@v2
        with:
          path: ${{ steps.vars.outputs.go_cache }}
          key: ${{ runner.os }}-go${{ matrix.go }}-release-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go${{ matrix.go }}-release

      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v2
        with:
          version: latest
          args: release --rm-dist
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAG: ${{ steps.vars.outputs.version_tag }}

      - name: Publish .deb to Gemfury
        if: ${{ steps.vars.outputs.tag_special == '' }}
        env:
          GEMFURY_PUSH_TOKEN: ${{ secrets.GEMFURY_PUSH_TOKEN }}
        run: |
          for filename in dist/*.deb; do
            # armv6 and armv7 are both "armhf" so we can skip the duplicate
            if [[ "$filename" == *"armv6"* ]]; then
              echo "Skipping $filename"
              continue
            fi
            curl -F package=@"$filename" https://${GEMFURY_PUSH_TOKEN}:@push.fury.io/linefusion/
          done

      - name: Publish .deb to Cloudsmith (special tags)
        if: ${{ steps.vars.outputs.tag_special != '' }}
        env:
          CLOUDSMITH_API_KEY: ${{ secrets.CLOUDSMITH_API_KEY }}
        run: |
          for filename in dist/*.deb; do
            # armv6 and armv7 are both "armhf" so we can skip the duplicate
            if [[ "$filename" == *"armv6"* ]]; then
              echo "Skipping $filename"
              continue
            fi
            echo "Pushing $filename to 'testing'"
            cloudsmith push deb linefusion/testing/any-distro/any-version $filename
          done

      - name: Publish .deb to Cloudsmith (stable tags)
        if: ${{ steps.vars.outputs.tag_special == '' }}
        env:
          CLOUDSMITH_API_KEY: ${{ secrets.CLOUDSMITH_API_KEY }}
        run: |
          for filename in dist/*.deb; do
            # armv6 and armv7 are both "armhf" so we can skip the duplicate
            if [[ "$filename" == *"armv6"* ]]; then
              echo "Skipping $filename"
              continue
            fi
            echo "Pushing $filename to 'stable'"
            cloudsmith push deb linefusion/stable/any-distro/any-version $filename
            echo "Pushing $filename to 'testing'"
            cloudsmith push deb linefusion/testing/any-distro/any-version $filename
          done
